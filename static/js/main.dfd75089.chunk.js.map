{"version":3,"sources":["components/container/Container.tsx","components/button/Button.tsx","components/input_field/InputField.tsx","reducer/constants.ts","components/header/Header.tsx","components/todo/Todo.tsx","reducer/reducer.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Container","appState","useContext","Context","className","Button","props","dispatch","onClick","type","command","payload","ident","InputField","useState","state","setState","placeholder","onChange","event","preventDefault","target","value","Header","Todo","background","message","reducer","action","Date","getTime","filter","el","index","length","map","initialValue","React","createContext","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAceA,EAXG,WAAO,IACfC,EAAaC,qBAAWC,GAAxBF,SAER,OACE,sBAAKG,UAAU,YAAf,gCAEGH,MCcQI,EAnBA,SAACC,GAAyB,IAC/BC,EAAaL,qBAAWC,GAAxBI,SAER,OACE,wBACEH,UAAU,SACVI,QAAS,kBACPD,EAAS,CACPE,KAAMH,EAAMI,QACZC,QAASL,EAAMK,QACfC,MAAON,EAAMM,SANnB,SAUGN,EAAMI,WCOEG,EArBI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,KAGvB,OACE,qCACE,uBACEC,YAAY,sBACZC,SAAU,SAAAC,GACRA,EAAMC,iBACNJ,EAASG,EAAME,OAAOC,UAI1B,sBAAKlB,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQM,QClBQ,aDkBWC,QAASI,IACpC,cAAC,EAAD,CAAQL,QClBW,mBDkBWC,QAASI,IACvC,cAAC,EAAD,CAAQL,QChBU,iBDgBWC,QAASI,WET/BQ,EATA,WACb,OACE,sBAAKnB,UAAU,SAAf,sBAEE,cAAC,EAAD,Q,OCSSoB,EAZF,SAAClB,GACZ,OACE,sBAAKF,UAAWE,EAAMmB,WAAtB,UACE,8BAAMnB,EAAMoB,UACZ,sBAAKtB,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQM,QFLI,OEKWE,MAAON,EAAMM,QACpC,cAAC,EAAD,CAAQF,QFPM,SEOWE,MAAON,EAAMM,eCDjCe,EAAU,SAACZ,EAAsBa,GAC5C,OAAQA,EAAOnB,MACb,IAAK,aACH,MAAM,GAAN,mBACKM,GADL,CAEE,cAAC,EAAD,CACEW,QAASE,EAAOjB,QAEhBC,OAAO,IAAIiB,MAAOC,UAClBL,WAAW,UAFN,IAAII,MAAOC,aAKtB,IAAK,mBACH,OAAO,YAAIf,EAAMgB,QAAO,SAACC,EAAIC,GAAL,OAAeA,EAAQlB,EAAMmB,OAAS,MAChE,IAAK,SACH,OAAO,YACFnB,EAAMgB,QAAO,SAACC,GAAD,OAAqBA,EAAG1B,MAAMM,QAAUgB,EAAOhB,UAEnE,IAAK,OACH,OAAO,YACFG,EAAMoB,KAAI,SAAAH,GACX,OAAIA,EAAG1B,MAAMM,QAAUgB,EAAOhB,MAE1B,cAAC,EAAD,CACEc,QAASM,EAAG1B,MAAMoB,QAElBd,MAAOoB,EAAG1B,MAAMM,MAChBa,WAAW,SAFNO,EAAG1B,MAAMM,OAMboB,MAGb,IAAK,iBACH,MAAO,GAEX,MAAO,ICtCHI,EAAe,GACRjC,EAAUkC,IAAMC,cAAc,CACzCrC,SAAU,GACVM,SAAU,KAgBGgC,MAbf,WAAgB,IAAD,EACgBC,qBAAWb,EAASS,GADpC,mBACNnC,EADM,KACIM,EADJ,KAGb,OACE,qBAAKH,UAAU,MAAf,SACE,eAACD,EAAQsC,SAAT,CAAkBnB,MAAO,CAAErB,WAAUM,YAArC,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCROmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dfd75089.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\nimport { Context } from \"../../App\";\r\n\r\nconst Container = () => {\r\n  const { appState } = useContext(Context);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      All Your Todos Here\r\n      {appState}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Context } from \"../../App\";\r\n\r\nconst Button = (props: object | any) => {\r\n  const { dispatch } = useContext(Context);\r\n\r\n  return (\r\n    <button\r\n      className=\"button\"\r\n      onClick={() =>\r\n        dispatch({\r\n          type: props.command,\r\n          payload: props.payload,\r\n          ident: props.ident\r\n        })\r\n      }\r\n    >\r\n      {props.command}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Button from \"../button/Button\";\r\nimport { ADD_TODO, EMPTY_LIST, REMOVE_LAST } from \"../../reducer/constants\";\r\nimport { useState } from \"react\";\r\n\r\nconst InputField = () => {\r\n  const [state, setState] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        placeholder=\"type your todo here\"\r\n        onChange={event => {\r\n          event.preventDefault();\r\n          setState(event.target.value);\r\n        }}\r\n      />\r\n\r\n      <div className=\"buttonContainer\">\r\n        <Button command={ADD_TODO} payload={state} />\r\n        <Button command={REMOVE_LAST} payload={state} />\r\n        <Button command={EMPTY_LIST} payload={state} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default InputField;\r\n","export const ADD_TODO = \"Add a todo\";\r\nexport const REMOVE_LAST = \"Remove last todo\";\r\nexport const REMOVE = \"Remove\";\r\nexport const DONE = \"Done\";\r\nexport const EMPTY_LIST = \"Empty the list\";\r\n","import InputField from \"../input_field/InputField\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      Todo List\r\n      <InputField />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import Button from \"../button/Button\";\r\nimport { DONE, REMOVE } from \"../../reducer/constants\";\r\n\r\nconst Todo = (props: object | any) => {\r\n  return (\r\n    <div className={props.background}>\r\n      <div>{props.message}</div>\r\n      <div className=\"buttonContainer\">\r\n        <Button command={DONE} ident={props.ident} />\r\n        <Button command={REMOVE} ident={props.ident} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import Todo from \"../components/todo/Todo\";\r\n\r\nexport type action = {\r\n  type: string;\r\n  payload: string;\r\n  ident: number;\r\n};\r\n\r\nexport const reducer = (state: JSX.Element[], action: action) => {\r\n  switch (action.type) {\r\n    case \"Add a todo\":\r\n      return [\r\n        ...state,\r\n        <Todo\r\n          message={action.payload}\r\n          key={new Date().getTime()}\r\n          ident={new Date().getTime()}\r\n          background=\"black\"\r\n        />\r\n      ];\r\n    case \"Remove last todo\":\r\n      return [...state.filter((el, index) => index < state.length - 1)];\r\n    case \"Remove\":\r\n      return [\r\n        ...state.filter((el: JSX.Element) => el.props.ident !== action.ident)\r\n      ];\r\n    case \"Done\":\r\n      return [\r\n        ...state.map(el => {\r\n          if (el.props.ident === action.ident)\r\n            return (\r\n              <Todo\r\n                message={el.props.message}\r\n                key={el.props.ident}\r\n                ident={el.props.ident}\r\n                background=\"green\"\r\n              />\r\n            );\r\n\r\n          return el;\r\n        })\r\n      ];\r\n    case \"Empty the list\":\r\n      return [];\r\n  }\r\n  return [];\r\n};\r\n","import \"./App.scss\";\nimport Container from \"./components/container/Container\";\nimport Header from \"./components/header/Header\";\nimport React from \"react\";\nimport { reducer, action } from \"./reducer/reducer\";\nimport { useReducer } from \"react\";\n\nconst initialValue = [] as JSX.Element[];\nexport const Context = React.createContext({\n  appState: [] as JSX.Element[],\n  dispatch: {} as React.Dispatch<action>\n});\n\nfunction App() {\n  const [appState, dispatch] = useReducer(reducer, initialValue);\n\n  return (\n    <div className=\"App\">\n      <Context.Provider value={{ appState, dispatch }}>\n        <Header />\n        <Container />\n      </Context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}